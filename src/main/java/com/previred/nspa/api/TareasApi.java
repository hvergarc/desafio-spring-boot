/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.previred.nspa.api;

import java.util.List;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import com.previred.nspa.model.TareasDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-01T19:02:29.794985500-03:00[America/Santiago]")
@Validated
@Tag(name = "tareas", description = "the tareas API")
public interface TareasApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /tareas : Obtener todas las tareas
     *
     * @return Operaci贸n exitosa (status code 200)
     */
    @Operation(
        operationId = "tareasGet",
        summary = "Obtener todas las tareas",
        responses = {
            @ApiResponse(responseCode = "200", description = "Operaci贸n exitosa", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TareasDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tareasGET",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TareasDTO>> tareasGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"descripcion\" : \"descripcion\", \"idTarea\" : 0, \"fechaLimite\" : \"2000-01-23T04:56:07.000+00:00\", \"estadoTarea\" : { \"idEstado\" : 1, \"nombreEstado\" : \"nombreEstado\" }, \"titulo\" : \"titulo\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"usuario\" : { \"idUsuario\" : 6, \"nombreUsuario\" : \"nombreUsuario\", \"contrasenaHash\" : \"contrasenaHash\", \"correoElectronico\" : \"correoElectronico\" } }, { \"descripcion\" : \"descripcion\", \"idTarea\" : 0, \"fechaLimite\" : \"2000-01-23T04:56:07.000+00:00\", \"estadoTarea\" : { \"idEstado\" : 1, \"nombreEstado\" : \"nombreEstado\" }, \"titulo\" : \"titulo\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"usuario\" : { \"idUsuario\" : 6, \"nombreUsuario\" : \"nombreUsuario\", \"contrasenaHash\" : \"contrasenaHash\", \"correoElectronico\" : \"correoElectronico\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /tareas/{id} : Eliminar una tarea por su ID
     *
     * @param id  (required)
     * @return Tarea eliminada exitosamente (status code 204)
     */
    @Operation(
        operationId = "tareasIdDelete",
        summary = "Eliminar una tarea por su ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Tarea eliminada exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tareasDelete/{id}"
    )
    default ResponseEntity<Void> tareasIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tareas/{id} : Obtener una tarea por su ID
     *
     * @param id  (required)
     * @return Operaci贸n exitosa (status code 200)
     */
    @Operation(
        operationId = "tareasIdGet",
        summary = "Obtener una tarea por su ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Operaci贸n exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TareasDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tareasGet/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TareasDTO> tareasIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descripcion\" : \"descripcion\", \"idTarea\" : 0, \"fechaLimite\" : \"2000-01-23T04:56:07.000+00:00\", \"estadoTarea\" : { \"idEstado\" : 1, \"nombreEstado\" : \"nombreEstado\" }, \"titulo\" : \"titulo\", \"fechaCreacion\" : \"2000-01-23T04:56:07.000+00:00\", \"usuario\" : { \"idUsuario\" : 6, \"nombreUsuario\" : \"nombreUsuario\", \"contrasenaHash\" : \"contrasenaHash\", \"correoElectronico\" : \"correoElectronico\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /tareas/{id} : Actualizar una tarea por su ID
     *
     * @param id  (required)
     * @param tareasDTO  (required)
     * @return Tarea actualizada exitosamente (status code 200)
     */
    @Operation(
        operationId = "tareasIdPut",
        summary = "Actualizar una tarea por su ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Tarea actualizada exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tareasPut/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> tareasIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "TareasDTO", description = "", required = true) @Valid @RequestBody TareasDTO tareasDTO
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /tareas : Crear una nueva tarea
     *
     * @param tareasDTO  (required)
     * @return Tarea creada exitosamente (status code 201)
     */
    @Operation(
        operationId = "tareasPost",
        summary = "Crear una nueva tarea",
        responses = {
            @ApiResponse(responseCode = "201", description = "Tarea creada exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tareasPOST",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> tareasPost(
        @Parameter(name = "TareasDTO", description = "", required = true) @Valid @RequestBody TareasDTO tareasDTO
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
